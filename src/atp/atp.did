type AccountReply = record {
  id : text;
  algorithm : SignatureAlgorithm;
  owner : text;
  curve : Curve;
  account_state : AccountState;
  approved_address : text;
  public_key_hex : text;
};
type AccountState = variant { active; locked; unlocked };
type Curve = variant { secp256k1; ed25519 };
type Eip1559TransactionRequestDTO = record {
  to : opt text;
  gas : opt text;
  value : opt text;
  max_priority_fee_per_gas : opt text;
  data : opt blob;
  from : opt text;
  max_fee_per_gas : opt text;
  chain_id : opt text;
  nonce : opt text;
};
type Result = variant { Ok : AccountReply; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type SignatureAlgorithm = variant { ecdsa; schnorr };
service : {
  activate_account : (text) -> (Result);
  create_account : (SignatureAlgorithm, Curve, principal) -> (Result);
  get_account : (text) -> (Result) query;
  get_eth_address : (text) -> (Result_1) query;
  sign : (text, text) -> (Result_1);
  sign_eip1559_transaction : (text, Eip1559TransactionRequestDTO) -> (Result_1);
  transfer_account : (text, principal) -> (Result);
  unlock_account : (text) -> (Result);
}
