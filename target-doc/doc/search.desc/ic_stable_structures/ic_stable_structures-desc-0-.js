searchState.loadedDescShard("ic_stable_structures", 0, "Stable Structures\nThe maximum number of stable memory pages a canister can …\nRestrictedMemory creates a limited view of another memory. …\nThis module implements a key/value store based on a B-Tree …\nA serializable value stored in the stable memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to grow the memory by <code>pages</code> many pages containing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn append-only list data structure, also known as log.\nA module for simulating multiple memories within a single …\nCopies the data referred to by <code>offset</code> out of the stable …\nCopies <code>count</code> number of bytes of the data starting from …\nReturns the current size of the stable memory in …\nThis module implements a growable array in stable memory.\nCopies the data referred to by <code>src</code> and replaces the …\nA “stable” map based on a B-tree.\nRemoves all elements from the map.\nRemoves all elements from the map.\nReturns <code>true</code> if the key exists in the map, <code>false</code> otherwise.\nReturns the first key-value pair in the map. The key in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value associated with the given key if it …\nInitializes a <code>BTreeMap</code>.\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying memory.\nReturns <code>true</code> if the map contains no elements.\nReturns an iterator over the entries of the map, sorted by …\nReturns an iterator pointing to the first element below …\nReturns an iterator over the keys of the map.\nReturns an iterator over the keys of the map which belong …\nReturns the last key-value pair in the map. The key in this\nReturns the number of elements in the map.\nLoads the map from memory.\nCreates a new instance a <code>BTreeMap</code>.\nRemoves and returns the first element in the map. The key …\nRemoves and returns the last element in the map. The key …\nReturns an iterator over the entries in the map where keys …\nRemoves a key from the map, returning the previous value …\nReturns an iterator over the values of the map, sorted by …\nReturns an iterator over the values of the map where keys …\nRepresents a serializable value stored in the stable …\nThe version of the library does not support version of the …\nIndicates a failure to initialize a Cell.\nIndicates a failure to set cell’s value.\nThe initial value was to large to fit into the memory.\nThe value is too large to fit into the cell memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current value in the cell.\nInitializes the value of the cell based on the contents of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying memory.\nCreates a new cell in the specified memory, overwriting …\nUpdates the current value in the cell. If the new value is …\nA <code>Memory</code> backed by a file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe magic number: Growable Log Data.\nThe magic number: Growable Log Index.\nAppend-only list of variable-size entries stored in stable …\nAppends a new entry to the log. If successful, returns the …\nReturns the number of data memory bytes in use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the entry at the specified index. Returns None if …\nReturns the number of index memory bytes in use.\nInitializes the log based on the contents of the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying memory trait objects of the log.\nReturns true iff this log does not have any entries.\nReturns an iterator over log entries.\nReturns an iterator over entries in the log stored in a …\nReturns the number of entries in the log.\nReturns the total size of all logged entries in bytes.\nCreates a new empty growable stable log backed by the …\nReads the contents of the entry with the specified index …\nA memory manager simulates multiple memories within a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the memory associated with the given ID.\nInitializes a <code>MemoryManager</code> with the given memory.\nInitializes a <code>MemoryManager</code> with the given memory and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying memory.\nAn implementation of the binary min heap.\nReturns the argument unchanged.\nInitializes a heap in the specified memory.\nCalls <code>U::from(self)</code>.\nReturns the underlying memory instance.\nReturns true if the heap is empty.\nReturns an iterator visiting all values in the underlying …\nReturns the number of items in the heap.\nCreates a new empty heap in the specified memory, …\nReturns the smallest item in the heap. Returns <code>None</code> if the …\nRemoves the smallest item from the heap and returns it. …\nPushes an item onto the heap.\nA reader to the stable memory which reads bytes a chunk at …\nA reader to the stable memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Reader</code> which reads from the selected memory …\nCreates a new <code>BufferedReader</code> which reads from the selected …\nReads data from the memory location specified by an offset.\nThe size bounds of the type.\nVariable-size, but limited in capacity byte array.\nStates whether the type’s size is bounded or unbounded.\nThe type has size bounds.\nA trait with convenience methods for storing an element …\nThe type has no size bounds.\nReturns the contents of this array as a byte slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts bytes into an element.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the array is empty.\nReturns true if the type is fixed in size, false otherwise.\nReturns the actual length of this array.\nReturns the maximum size of the type if bounded, panics if …\nConverts an element into bytes.\nLike <code>to_bytes</code>, but includes additional checks to ensure …\nTrue if all the values of this type have fixed-width …\nThe maximum size, in bytes, of the type when serialized.\nThe memory already contains another data structure. Use …\nThe vector type is not compatible with the current vector …\nThe current version of Vec does not support the of the …\nFailed to allocate memory for the vector.\nAn implementation of growable arrays in stable memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the item at the specified index.\nInitializes a vector in the specified memory.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying memory instance.\nReturns true if the vector is empty.\nReturns the number of items in the vector.\nCreates a new empty vector in the specified memory, …\nRemoves the item at the end of the vector.\nAdds a new item at the end of the vector.\nSets the item at the specified index to the specified …\nA <code>Memory</code> that is based on a vector.\nA writer to the stable memory which first writes the bytes …\nA writer that writes sequentially to memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Writer</code> which writes to the selected memory …\nCreates a new <code>BufferedStableWriter</code> which writes to the …\nWrites a byte slice to the underlying memory directly.")